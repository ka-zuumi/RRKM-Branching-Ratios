C
C***********************************************************************
C                                                                      *
C                            RRKM                                      *
C                                                                      *
C                   A GENERAL RRKM PROGRAM                             *
C                                                                      *
C                             BY                                       *
C                                                                      *
C                LING ZHU AND WILLIAM L. HASE                          *
C                                                                      *
C                         OCT 14, 1993                                 *
C                                                                      *
C***********************************************************************
      PROGRAM RRKM 
C     THIS PROGRAM IS USED TO CALCULATE THE UNIMOLECULAR RATE CONSTANT 
C     USING RRKM THEORY.  
C     IF THERE ARE SEVERAL POINTS ALONG THE REACTION PATH THAT HAVE SAME
C     MINIMUM SUM OF STATES (BECAUSE OF USING DIRECT COUNTING), THE 
C     MAXIMUM R IS CHOSEN AS THE POSITION OF THE TRANSITION STATE.
C
C DEFINITION OF ARRAYS
C
C     ARRAYS OF INFORMATION READ IN 
C        WM*       FREQUENCIES IN THE MOLECULE
C                  (ENTER FREQUENCIES IN DESCENDING SIZE)
C        TM*       PRINCIPAL MOMENTS OF INERTIA FOR MOLECULE
C                  (PUT THE PRINCIPLE MOMENT OF INERTIA FOR 
C                  K-AXIS LAST) 
C        TRM*      REDUCED MOMENTS OF INERTIA FOR MOLECULE
C                  (ENTER REDUCED MOMENTS OF INERTIA IN
C                  DENSCENDING SIZE)
C        SYMM*     SYMMETRY NUMBERS FOR INTERNAL ROTORS IN
C                  MOLECULE
C        WC*       FREQUENCIES IN THE TRANSITION STATE
C                  (ENTER FREQUENCIES IN DESCENDING SIZE AND -1
C                  FOR THOSE VALUES WILL CHANGE ALONG THE REACTION
C                  PATH)
C        TC*       PRINCIPAL MOMENTS OF INERTIA FOR THE TRANSITION
C                  STATE
C                  (PUT THE PRINCIPLE MOMENT OF INERTIA FOR
C                  K-AXIS LAST AND -1 FOR THOSE VALUES WILL CHANGE
C                  ALONG THE REACTION PATH)
C        TRC*      REDUCED MOMENTS OF INERTIA FOR THE TRANSITION
C                  STATE
C                  (ENTER REDUCED MOMENTS OF INERTIA IN
C                  DESCENDING SIZE AND -1 FOR THOSE VALUES WILL
C                  CHANGE ALONG THE REACTION PATH)
C        SYMC*     SYMMETRY NUMBERS FOR INTERNAL ROTORS IN THE 
C                  TRANSITION STATE
C        EDAGG*    ENERGIES OF THE TRANSITION STATE USED IN DETERMIN-
C                  ING THE TRANSLATIONAAL ENERGY DISTRIBUTION OF
C                  PRODUCTS
C  
C     ARRAYS READ IN FOR DETERMING THE TRANSITION STATE BY MINIMUM
C     NUMBER OF STATES
C        WCC(I,J)* FREQUENCY CHANGES AS R+ INCREASES.  I IS THE NUMBER
C                  OF MODES WHICH VARY WITH R+.  J IS THE NUMBER OF 
C                  REACTION CO-ORDINATE INTERVALS +1.
C        TCC(I,J)* PRINCIPAL MOMENTS OF INERTIA CHANGES AS R+ IS 
C                  INCREASED.  I AND J AS BEFORE.  MAXIMUM VALUE FOR I
C                  IS 3.
C        TRCC(I,J)*REDUCED MOMENTS OF INERTIA CHANGES AS R+ IS
C        INCREASED.
C                  I IS THE NUMBER OF REDUCED MOMENTS OF INERTIA WHICH   
C                  VARY WITH R+.  J AS BEFORE.
C        VRDAG*    VALUES OF POTENTIAL ENERGY OF CRITICAl CO-ORDINATE
C
C     ARRAYS PRODUCED BY SUBROUTINE <<CCDETR>>
C        WCG*      FREQUENCIES IN THE TRANSITION STATE
C        TCG*      PRINCIPAL MOMENTS OF INERTIA IN THE TRANSITION
C                  STATE
C        TRCG*     REDUCED MOMENTS OF INERTIA IN THE TRANSITION
C                  STATE
C
C     ARRAYS PRODUCED BY THE MAIN PROGRAM
C        E*        TOTAL ENERGY 
C        JK*       THE QUANTUM NUMBER OF TOTAL ANGULAR MOMENT
C        SUM*      SUMS OF HARMONIC VIBRATIONAL-INTERNAL ROTATIONAL 
C                  STATES IN THE TRANSITION STATE FOR KROT=-1, OR 2
C                  AND NANH=0
C        DEN*      DENSITIES OF HARMONIC VIBRATIONAL-INTERNAL ROTATIONAL
C                  STATES IN THE MOLECULE FOR KROT=-1 OR 3 AND NANH=0
C        ASUM*     SUMS OF ANHARMONIC VIBRATIONAL-INTERNAL ROTATIONAL
C                  STATES IN THE TRANSITION STATE FOR KROT=-1 OR 2 AND
C                  NANH=1
C        ADEN*     DENSITIES OF ANHARMONIC VIBRATIONAL-INTERNAL
C                  ROTATIONAL STATES FOR KROT=-1 OR 3 AND NANH=1
C        RRK*      UNIMOLECULAR RATE CONSTANTS FOR KROT=-1, 2, OR 3 
C                  AND NANH=0
C        ARRK*     UNIMOLECULAR RATE CONSTANTS FOR KROT=-1, 2, OR 3
C                  AND NANH=1
C        EE*       INCREMENTS OF TRANSLATIONAL ENERGY IN THE
C                  REACTION CO-ORDINATE FOR A FIXED TOTAL ENERGY
C                  (TRANSLATION+VIBRATION) IN TRANSITION STATE.
C                  THE DIMENSION 50 IS FIXED BY THE PROGRAM
C                  (INSTRUCTION 701)
C        GN*       DENSITIES OF VIBRATIONAL-INTERNAL ROTATIONAL
C                  STATES IN THE TRANSITION STATE (INSTRUCTION 701)
C        GG*       SUMS OF VIBRATIONAL-INTERNAL ROTATIONAL STATES
C                  IN THE TRANSITION STATE (INSTRUCTION 701)
C
C     LIST OF SUBROUTINES
C        CCDETR*
C        WRSEMI*
C        BSCOMP*
C        CLASS*
C        ROEN*
C        ROENG*
C        SUMQ*
C        CLACK*
C        ANHARM*
C        QUAFIT*
C        DATA*
C 
C     IMPORTANT!
C     THIS PROGRAM ONLY TREATS SYMMETRIC (OR ALMOST SYMMETRIC) TOP
C     MOLECULES. AT LEAST TWO MOMENTS OF INERTIA ARE THE SAME OR
C     NEARLY SAME FOR BOTH MOLECULE AND TRANSITION STATE. THOSE TWO
C     MOMENTS OF INERTIA AT THE TRANSITION STATE ARE ASSUMED TO
C     BEHAVE THE SAME WAY THAT MEANS BOTH ARE CONSTANT OR CHANGE THE
C     SAME WAY ALONG THE REACTION PATH.
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      CHARACTER*80 TITLE1,TITLE2
      PARAMETER (MAXF=1000,MAXCF=50,MAXIR=5,MAXCIR=2,MAXRP=200,
     *MAXE=50,MAXJ=50,MAXJV=200,MAXETR=250,MAXTT=50000)
      COMMON/OPTION/KROT,JDEN,JSUM,NANH,DAM,DAC
      COMMON/PARAMR/NSM,NRM,TM(3),WM(MAXF),TRM(MAXIR),SYMM(MAXIR)
      COMMON/PARAMT1/NSC,NRC,TC(3),WC(MAXF),TRC(MAXIR),SYMC(MAXIR)
      COMMON/PARAMT2/MR,JJ,KK,LL,WCC(MAXCF,MAXRP),TRCC(MAXCIR,MAXRP),
     *TCC(3,MAXRP),RDAG(MAXRP),DELR,VRDAG(MAXRP)
      COMMON/INPUT/E(MAXE),JK(MAXJ)
      COMMON/OUTPUT1/DEN(0:MAXJV),SUM(0:MAXJV),RRK(0:MAXJV),
     *ADEN(0:MAXJV),ASUM(0:MAXJV),ARRK(0:MAXJV)
      COMMON/DISTRE/EDAGG(MAXETR),EE(50),GG(0:MAXJV),
     *GN(0:MAXJV)
      COMMON/DATA1/Y(8),V(8),NDATA,NDUM
C
    1 FORMAT(A80)
    2 FORMAT(3I10,F10.0)
    3 FORMAT(7I10)
    4 FORMAT(7F10.0)
    5 FORMAT(/,I5,'  RATE CONSTANTS TO BE CALCULATED',5X,
     *'REACTION PATH DEGENERCY =',F4.1,//)
    6 FORMAT(20X,'***************************',/,20X,'*  DATA FOR',
     *' THE MOLECULE  *',/,20X,'***************************')
    7 FORMAT(2F10.0,I10)
    8 FORMAT(/,'NUMBER OF OSCILLATORS',5X,'NUMBER OF INTERNAL ROTORS',
     *//,1X,I10,16X,I10)
    9 FORMAT(/,'MOMENTS OF INERTIA',5X,'AMU*ANGSTROM**2',//,
     *3F10.2)
   10 FORMAT(/,'FREQUENCIES',5X,'1/CM',/)
   11 FORMAT(7F12.1)
   12 FORMAT(/,15X,'INTERNAL ROTORS',/)
   13 FORMAT('REDUCED MOMENT OF INERTIA =',F8.3,5X,
     *'SYMMETRY NUMBER =',F4.1)
   14 FORMAT('POTENTIAL ENERGY',5X,'NUMBER OF OSCILLATORS',
     *5X,'NUMBER OF INTERNAL ROTORS',//,F8.2,14X,I10,16X,I10)
   15 FORMAT(//,15X,'***********************************',/,15X,
     *'*  DATA FOR THE TRANSITION STATE  *',/,15X,
     *'***********************************')
   16 FORMAT(2F10.0,I10)
   17 FORMAT(/,'REACTION CO-ORDINATE',10X,
     *'  POTENTIAL ENERGY',/,6X,'ANGSTROM',21X,'KCAL/MOLE',/)
   18 FORMAT(5X,F10.2,19X,F10.2)
   19 FORMAT(/,'*****STRUCTURE OF THE TRANSITION STATE IS',
     *' SPECIFIED*****',/)
   20 FORMAT(/,'ANHARMONIC CORRECTION FOR MOLECULE:  AVERAGE',
     *' BOND ENERGY =',F7.2,' KCAL/MOLE')
   21 FORMAT(/,'ANHARMONIC CORRECTION FOR COMPLEX:  AVERAGE',
     *' BOND ENERGY =',F7.2,' KCAL/MOLE')
   22 FORMAT(/)
   23 FORMAT('XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',
     *'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',/)
   24 FORMAT('RATE CONSTANTS CALCULATED USING THESE OPTIONS:',
     *5X,'KROT =',I2,'  NANH =',I2,'  NCRIT =',I2,'  JDEN =',I3,
     *'  JSUM =',I3,///)
   25 FORMAT(4X,'E',8X,'J',8X,'DENSITY',8X,'SUM',8X,
     *'RATE CONSTANT',/)
   26 FORMAT(' KCAL/MOLE',12X,'1/CM-1',22X,'SECOND-1',//)
   27 FORMAT(F7.2,3X,I5,6X,D10.4,4X,D10.4,5X,D10.4)
   28 FORMAT(4X,'E',8X,'J',8X,'K',8X,'DENSITY',8X,
     *'SUM',8X,'RATE CONSTANT',/)
   29 FORMAT('KCAL/MOLE',22X,'1/CM-1',23X,'SECOND-1',/)
   30 FORMAT(F7.2,3X,I5,4X,I5,6X,D10.4,4X,D10.4,5X,D10.4)
   31 FORMAT(4X,'E',5X,'J',6X,'HARMONIC',5X,'HARMONIC',
     *5X,'HARMONIC',6X,'ANHARMONIC',4X,'ANHARMONIC',4X,
     *'ANHARMONIC',/)
   32 FORMAT('KCAL/MOLE',5X,'DENSITY(1/CM-1)',3X,'SUM',
     *5X,'RATE(SECOND-1)',1X,'DENSITY(1/CM-1)',4X,'SUM',6X,
     *'RATE(SECOND-1)',//)
   33 FORMAT(F7.2,I5,2X,3(3X,D10.4),1X,3(4X,D10.4))
   34 FORMAT(4X,'E',5X,'J',4X,'K',6X,'HARMONIC',5X,
     *'HARMONIC',5X,'HARMONIC',6X,'ANHARMONIC',4X,'ANHARMONIC',
     *4X,'ANHARMONIC',/)
   35 FORMAT('KCAL/MOLE',10X,'DENSITY(1/CM-1)',3X,'SUM',
     *5X,'RATE(SECOND-1)',1X,'DENSITY(1/CM-1)',4X,'SUM',6X,
     *'RATE(SECOND-1)',//)
   36 FORMAT(F7.2,2I5,5X,D10.4,3X,D10.4,3X,D10.4,1X,3(4X,D10.4))
   37 FORMAT(F7.2,I5,10X,'RATE CONSTANT CANNOT BE CALCULATED,',
     *' BECAUSE THE DENSITY IS ZERO')
   38 FORMAT(F7.2,2I5,10X,'RATE CONSTANT CANNOT BE CALCULATED',
     *' BECAUSE THE DENSITY IS ZERO')
   39 FORMAT(/,'EMIN =',F7.2,'  KCAL/MOLE','  DELE =',F7.2,
     *'  KCAL/MOLE','  NE =',I5)
   40 FORMAT(/,'JMIN =',I7,11X,'  DELJ =',I7,11X,'  NJ =',I5)
   41 FORMAT(//,'ROTATIONAL TEMPERATURE IS',F10.4,5X,'  J = ',I5)
   42 FORMAT(/,'MORE STORAGE IS NEEDED FOR THIS SYSTEM',
     *'IN THE PARAMETER STATEMENT SET MAXE >',I7)
   43 FORMAT(/,'THE FOLLOWING OPTION FOR KROT IS INVALID',I7)
   44 FORMAT(/,'MORE STORAGE IS NEEDED FOR THIS SYSTEM',
     *'IN THE PARAMETER STATEMENT SET EVEN INTEGER MAXJ >',I7)
   45 FORMAT(/,'THE FOLLOWING OPTION FOR NANH IS INVALID',I7)
   46 FORMAT(/,'THE FOLLOWING OPTION FOR JDEN IS INVALID',I7)
   47 FORMAT(/,'THE FOLLOWING OPTION FOR JSUM IS INVALID',I7)
   48 FORMAT(/,'MORE STORAGE IS NEEDED FOR THIS SYSTEM',
     *'IN THE PARAMETER STATEMENT SET MAXF >',I7)
   49 FORMAT(/,'MORE STORAGE IS NEEDED FOR THIS SYSTEM',
     *'IN THE PARAMETER STATEMENT SET MAXIR >',I7)
   50 FORMAT(/,'THE FOLLOWING OPTION FOR NCRIT IS INVALID',I7)
   51 FORMAT(/,'MORE STORAGE IS NEEDED FOR THIS SYSTEM',
     *'IN THE PARAMETER STATEMENT SET MAXRP >',I7)
   52 FORMAT(/,'MORE STORAGE IS NEEDED FOR THIS SYSTEM',
     *'IN THE PARAMETER STATEMENT SET MAXCF >',I7)
   53 FORMAT(/,'MORE STORAGE IS NEEDED FOR THIS SYSTEM',
     *'IN THE PARAMETER STATEMENT SET MAXCIR >',I7)
   54 FORMAT(/,'NCRIT=1 CANNOT BE USED TO CALCULATE',
     *'TRANSLATIONAL ENERGY DISTRIBUTION OF PRODUCTS',/)
   55 FORMAT(/,'MORE STORAGE IS NEEDED FOR THIS SYSTEM',
     *'IN THE PARAMETER STATEMENT SET MAXETR >',I7)
   56 FORMAT('--------------------------------------------',
     *'--------------------------------------------------------',/)
C
C        READ AND WRITE GENERAL DATA
C
      CALL DATA
      READ(5,1)TITLE1
      READ(5,1)TITLE2
      WRITE(6,*)
      WRITE(6,1)TITLE1
      WRITE(6,1)TITLE2
C
  999 READ(5,7)EMIN,EDEL,NE
      IF(NE.EQ.0)GO TO 920
      IF(NE.GT.MAXE)THEN
      WRITE(6,42)NE
      STOP
      ELSE
      ENDIF
      WRITE(6,39)EMIN,EDEL,NE
C
C     OPTIONS FOR EXTERNAL ROTATION [J. PHYS. CHEM., 97, 311,
C     (1993)]
C        KROT = -1   ADIABATIC/ADIABATIC(TRANSITION STATE/MOLECULE)
C        KROT =  0   ACTIVE/ACTIVE              
C        KROT = +1   HOT ATOM
C        KROT = +2   ADIABATIC/ACITVE
C        KROT = +3   ACTIVE/ADIABATIC
C        KROT = +4   GILBERT-SMITH MODEL
C
      READ(5,3)KROT
      IF(KROT.GT.4.OR.KROT.LT.-1)THEN
      WRITE(6,43)KROT
      STOP
      ELSE
      ENDIF
      IF(KROT.NE.1)GO TO 91
      READ(5,4)FMIN,DELF,FMAX,CSMIN,DELCS,CSMAX,EVIBR
      DELFO=DELF
      READ(5,4)WR,WA,WP
      IF((FMAX-FMIN).EQ.0.0)GO TO 88
      IF(DELF.EQ.0.0)GO TO 88
      GO TO 89
   88 DELF=1.0
   89 IF((CSMAX-CSMIN).EQ.0.0)GO TO 90
      IF(DELCS.EQ.0.0)GO TO 90
      GO TO 91
   90 DELCS=1.0
C
   91 READ(5,2)JMIN,JDEL,NJ,TROT
      IF(NJ.GT.MAXJ)THEN
      WRITE(6,44)NJ
      STOP
      ELSE
      ENDIF
      IF(JMIN.GE.0)GO TO 92
      KROT=0
      NJ=1
      GO TO 93
   92 WRITE(6,40)JMIN,JDEL,NJ
      IF(NJ.EQ.0)GO TO 920
C
C     ANHARMONIC OPTIONS
C        NANH = 0   HARMONIC CALCULATION
C        NANH = 1   ANHARMONIC CALCULATION:  HAARHOFF TECHNIQUE
C
   93 READ(5,3)NANH
      IF(NANH.NE.1.AND.NANH.NE.0)THEN
      WRITE(6,45)NANH
      STOP
      ELSE
      ENDIF
      IF(NANH.EQ.0)GO TO 94
      READ(5,4)DAM,DAC
C
C     OPTIONS FOR SUM AND DENSITY CALCULATIONS
C        -1    DIRECT COUNT OF QUANTUM STATES
C         0    SEMICLASSICAL TECHNIQUE
C        +1    CLASSICAL TECHNIQUE
C      JDEN IS THE DENSITY OPTION
C      JSUM IS THE SUM OPTION
C
   94 READ(5,3)JDEN
      READ(5,3)JSUM
      IF(IABS(JDEN).GT.1)THEN
      WRITE(6,46)JDEN
      STOP
      ELSE
      IF(IABS(JSUM).GT.1)THEN
      WRITE(6,47)JSUM
      STOP
      ELSE
      ENDIF
      ENDIF
C
      E(1)=EMIN
      DO 95 I=2,NE
   95 E(I)=E(I-1)+EDEL
      JK(1)=JMIN
      DO 96 I=2,NJ
   96 JK(I)=JK(I-1)+JDEL
      ANE=DBLE(NE)
      ANJ=DBLE(NJ)
      AEJ=ANE*ANJ
      IF(KROT.EQ.1)GO TO 100
      IF(KROT.EQ.0.OR.KROT.EQ.4)GO TO 99
   97 AKK=0.0
      DO 98 I=1,NJ
   98 AKK=AKK+DBLE(JK(I))+1.0
      ANUM=ANE*AKK
      NUM=INT(ANUM)
      GO TO 101
   99 NUM=INT(AEJ)
      GO TO 101
  100 NUM=INT(ANE)
C
  101 READ(5,4)SIGMA
      WRITE(6,5)NUM,SIGMA
C
C        READ AND WRITE DATA FOR REACTANT
C
      WRITE(6,6)
      READ(5,3)NSM,NRM
      WRITE(6,8)NSM,NRM
      IF(NSM.GT.MAXF)THEN
      WRITE(6,48)NSM
      STOP
      ELSE
      IF(NRM.GT.MAXIR)THEN
      WRITE(6,49)NRM
      STOP
      ELSE
      ENDIF
      ENDIF
      ! Kazuumi change 1/2
      READ(5,FMT=*) (WM(I),I=1,NSM) !READ(5,4)(WM(I),I=1,NSM)
      WRITE(6,10)
      WRITE(6,11)(WM(I),I=1,NSM)
      READ(5,4)(TM(I),I=1,3)
      WRITE(6,9)(TM(I),I=1,3)
      IF(NRM.EQ.0)GO TO 110
      READ(5,4)(TRM(I),I=1,NRM)
      READ(5,4)(SYMM(I),I=1,NRM)
      WRITE(6,12)
      DO 105 I=1,NRM
  105 WRITE(6,13)TRM(I),SYMM(I)
  110 IF(NANH.EQ.0)GO TO 120
      WRITE(6,20)DAM
  120 IF(JMIN.GE.0)GO TO 130
      TOTI=0.0D0
      DO 125 I=1,3
  125 TOTI=TOTI+TM(I)
      CONTT=0.0206149D0*TOTI*TROT
      JK(1)=INT(-0.5D0+0.5D0*DSQRT(1.0D0+4.0D0*CONTT))
      WRITE(6,41)TROT,JK(1)
C 
C        READ AND WRITE DATA FOR TRANSITION STATE 
C
  130 WRITE(6,15)
C
C     OPTION FOR DETERMINING TRANSITION STATE BY MINIMUM 
C     NUMBER OF STATES 
C        NCRIT = 0    TRANSITION STATE IS SPECIFIED BY USER
C        NCRIT = 1    DETERMINE TRANSITION STATES BY MINIMUM
C                     NUMBER OF STATES
C
      READ(5,3)NCRIT
      IF(NCRIT.NE.0.AND.NCRIT.NE.1)THEN
      WRITE(6,50)NCRIT
      STOP
      ELSE
      ENDIF
      IF(NCRIT.EQ.0)GO TO 165
      READ(5,16)RMIN,RMAX,NR
      ANR=DBLE(NR)
      DELR=(RMAX-RMIN)/ANR
      MR=NR+1
      IF(MR.GT.MAXRP)THEN
      WRITE(6,51)MR
      STOP
      ELSE
      ENDIF
      READ(5,4)(VRDAG(I),I=1,MR)
      RDAG(1)=RMIN
      DO 150 I=2,MR
  150 RDAG(I)=RDAG(I-1)+DELR
      GO TO 170
  165 WRITE(6,19)
      NR=0
      MR=1
      READ(5,4)VC
  170 READ(5,3)NSC,NRC
      IF(NSC.GT.MAXF)THEN
      WRITE(6,48)NSC
      STOP
      ELSE
      IF(NRC.GT.MAXIR)THEN
      WRITE(6,49)NRC
      STOP
      ELSE
      ENDIF
      ENDIF
      ! Kazuumi change 2/2
      READ(5,FMT=*) (WC(I),I=1,NSC) !READ(5,4)(WC(I),I=1,NSC)
      JJ=0
      IF(WC(NSC).GT.0.0)GO TO 240
      I=1
  190 IF(WC(I).LE.0.0)GO TO 200
      I=I+1
      GO TO 190
  200 JJ=NSC-I+1
      IF(JJ.GT.MAXCF)THEN
      WRITE(6,52)JJ
      STOP
      ELSE
      ENDIF
      DO 210 J=1,JJ
  210 READ(5,4)(WCC(J,I),I=1,MR)
  240 IF(NCRIT.EQ.0)GO TO 267
      WRITE(6,17)
      DO 264 I=1,MR
  264 WRITE(6,18)RDAG(I),VRDAG(I)
  267 LL=0
      READ(5,4)(TC(I),I=1,3)
      IF(TC(3).GT.0.0)GO TO 269
      LL=1
      IF(TC(1).LE.0.0)LL=3
      DO 268 J=1,LL
  268 READ(5,4)(TCC(J,I),I=1,MR)
      GO TO 305
  269 IF(TC(1).GT.0.0)GO TO 305
      LL=3
      DO 300 J=1,2
  300 READ(5,4)(TCC(J,I),I=1,MR)
      DO 301 I=1,MR
  301 TCC(3,I)=TC(3)
  305 KK=0
      IF(NRC.EQ.0)GO TO 331
      READ(5,4)(TRC(I),I=1,NRC)
      READ(5,4)(SYMC(I),I=1,NRC) 
      IF(TRC(NRC).GT.0.0)GO TO 331
      I=1
  310 IF(TRC(I).LE.0.0)GO TO 320
      I=I+1
      GO TO 310
  320 KK=NRC-I+1
      IF(KK.GT.MAXCIR)THEN
      WRITE(6,53)KK
      STOP
      ELSE
      ENDIF
      DO 330 J=1,KK
  330 READ(5,4)(TRCC(J,I),I=1,MR)
  331 IF(NCRIT.EQ.1)GO TO 340
      WRITE(6,14)VC,NSC,NRC
      WRITE(6,10)
      WRITE(6,11)(WC(I),I=1,NSC)
      WRITE(6,9)(TC(I),I=1,3)
      IF(NRC.EQ.0)GO TO 335
      WRITE(6,12)
      DO 332 I=1,NRC
  332 WRITE(6,13)TRC(I),SYMC(I)
  335 IF(NANH.EQ.0)GO TO 340
      WRITE(6,21)DAC
C
C
  340 CON1=2.99792458D+10
      IF(KROT.EQ.1)GO TO 611
      WRITE(6,22)
      WRITE(6,23)
      WRITE(6,24)KROT,NANH,NCRIT,JDEN,JSUM
      IF(NCRIT.EQ.1)GO TO 345
      IF(KROT.NE.0.AND.KROT.NE.4)GO TO 342
      IF(NANH.EQ.1)GO TO 341
      WRITE(6,25)
      WRITE(6,26)
      GO TO 345
  341 WRITE(6,31)
      WRITE(6,32)
      GO TO 345
  342 IF(NANH.EQ.1)GO TO 343
      WRITE(6,28)
      WRITE(6,29)
      GO TO 345
  343 WRITE(6,34)
      WRITE(6,35)
  345 DO 592 ME=1,NE
      ENOW=E(ME)
      DO 591 MJ=1,NJ
      JNOW=JK(MJ)
      AJ=DBLE(JNOW)
C
C---------------------------------------------------------------C
C---------------------------------------------------------------C
C                                                               C
C     CALCULATION OF THE DENSTIY OF STATES FOR REACTANT         C
C                                                               C
C---------------------------------------------------------------C
C---------------------------------------------------------------C
C
      GL=1.0
      DENM=0.0
      ADENM=0.0
      EM=ENOW*349.755
      JAN=0
      IF(KROT.EQ.4)GO TO 420
      IF(KROT.EQ.-1.OR.KROT.EQ.3)GO TO 346
      IF(JDEN.EQ.1.AND.JNOW.NE.0)GO TO 415
  346 DO 410 L=0,JNOW
      AL=DBLE(L)
      DEN(L)=0.0
      ADEN(L)=0.0
      IF(L.GT.0)GL=2.0
      CALL ROEN(TM,AJ,AL,EJKM)
      EVIBM=EM-EJKM
      IF(EVIBM.LE.0.0)GO TO 410
C
C
C******************************************************************
C     MODELS: ACTIVE/ACTIVE(KROT=0),ADIABATIC/ADIABATIC(KROT=-1),
C             ADIABATIC/ACTIVE(KROT=2),ACTIVE/ADIABATIC(KROT=3)
C******************************************************************
C
  349 IF(JDEN-0)350,370,390
C
C        DIRECT COUNT
C
  350 EVM1=EVIBM+50.0
      CALL SUMQ(EVM1,NSM,NRM,WM,TRM,SYMM,SS)
      SUM1=SS
      EVM2=EVM1-100.0
      CALL SUMQ(EVM2,NSM,NRM,WM,TRM,SYMM,SS)
      SUM2=SS
      DEN(L)=(SUM1-SUM2)/100.0
      GO TO 400 
C
C        SEMICLASSICAL METHOD
C
  370 CALL WRSEMI(NSM,NRM,WM,TRM,SYMM,EVIBM,JAN,DD)
      DEN(L)=DD
      GO TO 400
C
C        CLASSICAL METHOD 
C
  390 CALL CLASS(NSM,NRM,WM,TRM,SYMM,EVIBM,JAN,DD)
      DEN(L)=DD
C
  400 DENM=DENM+GL*DEN(L)
      IF(NANH.EQ.0)GO TO 410
      KAN=0
      CALL ANHARM(NSM,NRM,WM,DAM,KAN,EVIBM,CM)
      ADEN(L)=DEN(L)*CM
      ADENM=ADENM+GL*ADEN(L)
  410 CONTINUE
      GO TO 416
C
  415 CALL CLACK(EM,AJ,NSM,NRM,WM,TM,TRM,SYMM,NANH,DAM,
     *JAN,DD,ADD)
      DENM=DD
      IF(NANH.EQ.0)GO TO 416
      ADENM=ADD
C
  416 IF(KROT.EQ.0)GO TO 499
      DENM=DENM/(2.0*AJ+1.0)
      ADENM=ADENM/(2.0*AJ+1.0)
      GO TO 499
C
C********************************************************************
C     GILBERT-SMITH MODEL(KROT=4)
C********************************************************************
C
  420 CALL ROENG(TM,AJ,EJKM,DDM)
      EVIBM=EM-EJKM
      IF(EVIBM.LE.0.0D0)GO TO 499
      DO 480 L=1,NDATA
      DD=0.0D0
      ADD=0.0D0
      YY=1.0D0-Y(L)**2
      EEM=YY*EVIBM
      IF(JDEN-0)430,440,450
C
C        DIRECT COUNT
C
  430 EVM1=EEM+50.0
      CALL SUMQ(EVM1,NSM,NRM,WM,TRM,SYMM,SS)
      SUM1=SS
      EVM2=EVM1-100.0
      CALL SUMQ(EVM2,NSM,NRM,WM,TRM,SYMM,SS)
      SUM2=SS
      DD=(SUM1-SUM2)/100.0
      GO TO 460
C
C        SEMICLASSICAL METHOD
C
  440 CALL WRSEMI(NSM,NRM,WM,TRM,SYMM,EEM,JAN,DD)
      GO TO 460
C
C        CLASSICAL METHOD
C
  450 CALL CLASS(NSM,NRM,WM,TRM,SYMM,EEM,JAN,DD)
C
  460 IF(NANH.EQ.0)GO TO 470
      KAN=0
      CALL ANHARM(NSM,NRM,WM,DAM,KAN,EEM,CM)
      ADD=DD*CM
C
  470 DENM=DENM+DD*V(L)
      ADENM=ADENM+ADD*V(L)
  480 CONTINUE
      DENM=DENM*DDM*EVIBM**0.5*2.0
      ADENM=ADENM*DDM*EVIBM**0.5*2.0
C
C---------------------------------------------------------------C
C---------------------------------------------------------------C
C                                                               C
C   CALCULATION OF THE SUM OF STATES FOR THE TRANSITION STATE   C
C                                                               C
C---------------------------------------------------------------C
C---------------------------------------------------------------C
C
  499 GL=1.0
      SUMC=0.0
      ASUMC=0.0
      JAN=1
      IF(KROT.EQ.4)GO TO 541
      IF(JNOW.EQ.0)GO TO 500
      IF(KROT.EQ.-1.OR.KROT.EQ.2)GO TO 500
      IF(JSUM.EQ.1)GO TO 541
      IF(NCRIT.EQ.0)GO TO 500
      GO TO 541
  500 DO 540 L=0,JNOW
      AL=DBLE(L)
      SUM(L)=0.0
      ASUM(L)=0.0
      IF(L.GT.0)GL=2.0
C
      IF(NCRIT.EQ.0)GO TO 501
C
C****************************************************************
C     FINDING THE POSITION OF TRANSITION STATE BY MINIMUM 
C     NUMBER OF STATES(NCRIT=1) FOR SPECIFIC E, J, AND K
C****************************************************************
C
      CALL CCDETR(ENOW,JNOW,L,SUMG,ASUMG)
      SUM(L)=SUMG
      ASUM(L)=ASUMG
      GO TO 535
C
  501 EC=ENOW*349.755-VC*349.755
      CALL ROEN(TC,AJ,AL,EJKC)
      EVIBC=EC-EJKC
C
C*****************************************************************
C     MODELS: ACTIVE/ACTIVE(KROT=0),ADIABATIC/ADIABATIC(KROT=-1),
C             ADIABATIC/ACTIVE(KROT=2),ACTIVE/ADIABATIC(KROT=3)
C*****************************************************************
C
      IF(JSUM-0)510,520,530
C
C        BEYER-SWINEHART ALGORITHM
C
  510 CALL SUMQ(EVIBC,NSC,NRC,WC,TRC,SYMC,SS)
      SUM(L)=SS
      GO TO 535
C
C        WHITTEN-RABINOVITCH TECHNIQUE
C
  520 IF(EVIBC.LE.0.0)GO TO 540
      CALL WRSEMI(NSC,NRC,WC,TRC,SYMC,EVIBC,JAN,SS)
      SUM(L)=SS
      GO TO 535
C
C        CLASSICAL METHOD
C
  530 IF(EVIBC.LE.0.0)GO TO 540
      CALL CLASS(NSC,NRC,WC,TRC,SYMC,EVIBC,JAN,SS)
      SUM(L)=SS
C
  535 SUMC=SUMC+GL*SUM(L)
      IF(NANH.EQ.0)GO TO 540
      KAN=1
      CALL ANHARM(NSC,NRC,WC,DAC,KAN,EVIBC,CC)
      ASUM(L)=SUM(L)*CC
      ASUMC=ASUMC+GL*ASUM(L)
  540 CONTINUE
      GO TO 547
C
  541 IF(NCRIT.EQ.0)GO TO 546
C
C****************************************************************
C     FINDING THE POSITION OF TRANSITION STATE BY MINIMUM 
C     NUMBER OF STATES(NCRIT=1) FOR SPECIFIC E AND J
C****************************************************************
C
      L=-1
      CALL CCDETR(ENOW,JNOW,L,SUMG,ASUMG)
      SUMC=SUMG
      ASUMC=ASUMG
      GO TO 547
C
C
  546 EC=ENOW*349.755-VC*349.755
      IF(KROT.EQ.4)GO TO 550
      CALL CLACK(EC,AJ,NSC,NRC,WC,TC,TRC,SYMC,NANH,DAC,
     *JAN,SS,ASS)
      SUMC=SS
      IF(NANH.EQ.0)GO TO 547
      ASUMC=ASS
C
  547 IF(KROT.EQ.0.OR.KROT.EQ.4)GO TO 581
      SUMC=SUMC/(2.0D0*AJ+1.0D0)
      ASUMC=ASUMC/(2.0D0*AJ+1.0D0)
      GO TO 581 
C
C*****************************************************************
C     GILBERT-SMITH MODEL(KROT=4)
C*****************************************************************
C
  550 CALL ROENG(TC,AJ,EJKC,DDC)
      EVIBC=EC-EJKC
      IF(EVIBC.LE.0.0D0)GO TO 581
      DO 580 L=1,NDATA
      SS=0.0D0
      ASS=0.0D0
      YY=1.0D0-Y(L)**2
      EEC=YY*EVIBC
      IF(JSUM-0)560,565,570
C
C        DIRECT COUNT
C
  560 CALL SUMQ(EEC,NSC,NRC,WC,TRC,SYMC,SS)
      GO TO 575
C
C        SEMICLASSICAL METHOD
C
  565 CALL WRSEMI(NSC,NRC,WC,TRC,SYMC,EEC,JAN,SS)
      GO TO 575
C
C        CALSSICAL METHOD
C
  570 CALL CLASS(NSC,NRC,WC,TRC,SYMC,EEC,JAN,SS)
C
  575 IF(NANH.EQ.0)GO TO 576
      KAN=1
      CALL ANHARM(NSC,NRC,WC,DAC,KAN,EEC,CC)
      ASS=SS*CC
C
  576 SUMC=SUMC+SS*V(L)
      ASUMC=ASUMC+ASS*V(L)
  580 CONTINUE
      SUMC=SUMC*DDC*EVIBC**0.5*2.0
      ASUMC=ASUMC*DDC*EVIBC**0.5*2.0
C
C----------------------------------------------------------------C
C----------------------------------------------------------------C
C                                                                C   
C        CALCULATION AND PRINT OUT OF RATE CONSTANT              C  
C                                                                C
C----------------------------------------------------------------C
C----------------------------------------------------------------C
C
C
  581 IF(KROT.EQ.-1)GO TO 584
      IF(KROT.EQ.2)GO TO 584
      IF(KROT.EQ.3)GO TO 584
      IF(DENM.EQ.0.0)GO TO 583
      RK=CON1*SIGMA*SUMC/DENM
      IF(NANH.EQ.1)GO TO 582
      IF(NCRIT.EQ.0)GO TO 595
      WRITE(6,*)
      WRITE(6,*)
      WRITE(6,25)
      WRITE(6,26)
  595 WRITE(6,27)ENOW,JNOW,DENM,SUMC,RK
      GO TO 590
  582 ARK=CON1*SIGMA*ASUMC/ADENM
      IF(NCRIT.EQ.0)GO TO 596
      WRITE(6,*)
      WRITE(6,*)
      WRITE(6,31)
      WRITE(6,32)
  596 WRITE(6,33)ENOW,JNOW,DENM,SUMC,RK,ADENM,ASUMC,ARK
      GO TO 590
  583 WRITE(6,37)ENOW,JNOW
      GO TO 590
  584 IF(NCRIT.EQ.0)GO TO 586
      IF(NANH.EQ.1)GO TO 585
      WRITE(6,*)
      WRITE(6,*)
      WRITE(6,28)
      WRITE(6,29)
      GO TO 586
  585 WRITE(6,*)
      WRITE(6,*)
      WRITE(6,34)
      WRITE(6,35)
  586 DO 589 L=0,JNOW
      IF(KROT.EQ.2)DEN(L)=DENM
      IF(KROT.EQ.3)SUM(L)=SUMC
      IF(DEN(L).EQ.0.0)GO TO 588
      RRK(L)=CON1*SIGMA*SUM(L)/DEN(L)
      IF(NANH.EQ.1)GO TO 587
      WRITE(6,30)ENOW,JNOW,L,DEN(L),SUM(L),RRK(L)
      GO TO 589
  587 IF(KROT.EQ.2)ADEN(L)=ADENM
      IF(KROT.EQ.3)ASUM(L)=ASUMC
      ARRK(L)=CON1*SIGMA*ASUM(L)/ADEN(L)
      WRITE(6,36)ENOW,JNOW,L,DEN(L),SUM(L),RRK(L),ADEN(L),
     *ASUM(L),ARRK(L)
      GO TO 589
  588 WRITE(6,38)ENOW,JNOW,L
  589 CONTINUE
  590 IF(NCRIT.EQ.0)GO TO 591
      WRITE(6,56)
  591 CONTINUE
  592 CONTINUE
      GO TO 710
C
C
C     HOT ATOM RATE CALCULATIONS.  THIS PROGRAM USES TECHNIQUE DESCRIBED
C     BY DON L. BUNKER; SEE JOURNAL OF CHEMICAL PHYSICS, 57, 332(1972).
C   
  603 FORMAT(/,'HOT ATOM EXTERNAL ROTATIONS',//,' F MIN',10X,
     *'DELTA F',10X,' F MAX',//,F6.2,F17.2,F16.2,//,' MINIMUM',
     *' CROSS SECTION',5X,'DELTA CROSS SECTION',5X,'MAXIMUM CROSS',
     *' SECTION',//,F13.3,F24.3,F25.3,//,' MASS OF HOT ATOM',5X,
     *'MASS OF DISPLACED ATOM',5X,'MASS OF PRODUCT',//,
     *F9.3,F25.3,F23.3,//)
  604 FORMAT(/,'TRANSLATIONAL ENERGY OF INCIDENT HOT ATOM =',F7.2,
     *' KCAL/MOLE',6X,'VIBRATIONAL ENERGY OF REACTANTS =',F6.2,
     *' KCAL/MOLE',/)     
  605 FORMAT('SUM AND DENSITY INCLUDE AN ANHARMONIC CORRECTION',/)
  606 FORMAT('  F',10X,'CROSS SECTION',10X,'ESTAR',10X,'EDAG',
     *8X,'J(X,Y OR Z)',7X,'DENSITY',10X,'SUM',12X,'RATE CONSTANT')    
  607 FORMAT(/,34X,'KCAL/MOLE',6X,'KCAL/MOLE',8X,'H-BAR',//)
  608 FORMAT(F5.2,F17.2,F20.2,F15.2,D16.4,D16.4,D16.4,D18.4)
  609 FORMAT(F5.2,F17.2,F20.2,'  CALCULATION CAN NOT BE MADE,',
     *' ESTAR IS NEGATIVE')  
  610 FORMAT(F5.2,F17.2,F20.2,F15.2,D16.4,'  CALCULATION CAN NOT',
     *' BE MADE EDAG IS NEGATIVE')    
  611 WRITE(6,603)FMIN,DELFO,FMAX,CSMIN,DELCS,CSMAX,WR,WA,WP
      WRITE(6,22)
      WRITE(6,23)
      WRITE(6,24)KROT,NANH,NCRIT,JDEN,JSUM
      DO 700 I=1,NE
      ETRAN=E(I)
      ETRN=ETRAN*349.755
      EVIB=EVIBR*349.755
      EZER=VC*349.755
      WRITE(6,604)ETRAN,EVIBR     
      IF(NANH.EQ.0)GO TO 615 
      WRITE(6,605)      
  615 WRITE(6,606)    
      WRITE(6,607)   
      IF((TM(3)-0.00005).GT.0.0)GO TO 620   
      DUM1M=(1.0/TM(1)+1.0/TM(2))*4.0/3.1416**3.0
      DUM1C=(1.0/TC(1)+1.0/TC(2))*4.0/3.1416**3.0 
      GO TO 625    
  620 DUM1M=(1.0/TM(1)+1.0/TM(2)+1.0/TM(3))/4.0/3.1416    
      DUM1C=(1.0/TC(1)+1.0/TC(2)+1.0/TC(3))/4.0/3.1416 
  625 F=FMIN                 
  630 ALPHA=(WR**0.5-((1.0-F)*WA*WP/(WA+WP))**0.5)**2.0  
      DUM2=F*ETRN+EVIB      
      CS=CSMIN            
  635 DUM3=CS*ETRN*ALPHA 
      ANGU=DUM3*2.0*3.1416*2.99792458E+10
      ANGUR=(ANGU/6.02214E+23/1.0E+16/6.62608E-27)**0.5
      ESTR=DUM2-DUM3*DUM1M  
      ESTAR=ESTR/349.755    
      IF(ESTR.LE.0)GO TO 675  
      EDG=DUM2-EZER-DUM3*DUM1C 
      EDAG=EDG/349.755       
      IF(EDG.LE.0)GO TO 680
      IF(JDEN.GE.0)GO TO 640  
      YY=ESTR-50.0           
      CALL SUMQ(YY,NSM,NRM,WM,TRM,SYMM,SS) 
      SUM1=SS                         
      YY=YY+100                    
      CALL SUMQ(YY,NSM,NRM,WM,TRM,SYMM,SS)  
      SUM2=SS
      DENM=(SUM2-SUM1)/100.0  
      GO TO 655                 
  640 JAN=0           
      IF(JDEN.GT.0)GO TO 650     
      CALL WRSEMI(NSM,NRM,WM,TRM,SYMM,ESTR,JAN,DD)
      DENM=DD
      GO TO 655      
  650 CALL CLASS(NSM,NRM,WM,TRM,SYMM,ESTR,JAN,DD)  
      DENM=DD                         
  655 IF(JSUM.GE.0)GO TO 660           
      YY=EDG      
      CALL SUMQ(YY,NSC,NRC,WC,TRC,SYMC,SS)  
      SUMC=SS
      GO TO 670                    
  660 JAN=1              
      IF(JSUM.GT.0)GO TO 665   
      CALL WRSEMI(NSC,NRC,WC,TRC,SYMC,EDG,JAN,SS)   
      SUMC=SS
      GO TO 670        
  665 CALL CLASS(NSC,NRC,WC,TRC,SYMC,EDG,JAN,SS)  
      SUMC=SS
  670 IF(NANH.EQ.0)GO TO 673  
      KAN=0                    
      CALL ANHARM(NSM,NRM,WM,DAM,KAN,ESTR,CM) 
      DENM=DENM*CM           
      KAN=1                 
      CALL ANHARM(NSC,NRC,WC,DAC,KAN,EDG,CC)
      SUMC=SUMC*CC           
  673 RK=CON1*SIGMA*SUMC/DENM
      WRITE(6,608)F,CS,ESTAR,EDAG,ANGUR,DENM,SUMC,RK
      GO TO 685
  675 WRITE(6,609)F,CS,ESTAR   
      GO TO 685            
  680 WRITE(6,610)F,CS,ESTAR,EDAG,ANGUR 
  685 CS=CS+DELCS                
      IF(CS.LE.CSMAX)GO TO 635  
      F=F+DELF          
      IF(F.LE.FMAX)GO TO 630    
  690 WRITE(6,22)   
  700 CONTINUE
      GO TO 910
C                
C     CALCULATE TRANSLATIONAL ENERGY DISTRIBUTION AT TRANSITION
C     STATE
C           
  701 FORMAT('TRANSLATIONAL ENERGY DISTRIBUTION OF THE PRODUCTS',
     *' FROM THE UNIMOLECULAR REACTION')     
  702 FORMAT('INTERNAL ENERGY AVAILABLE FOR TRANSLATION =',F7.2,
     *' KCAL/MOLE',/)           
  703 FORMAT(5X,'J',10X,'TRANSLATIONAL ENERGY OF PRODUCTS',10X,
     *'PROBABILITY OF TRANSLATIONAL ENERGY(PER KCAL/MOLE)',/)    
  704 FORMAT(I6,10X,F16.2,26X,D18.4)        
  705 FORMAT(5X,'J',5X,'K',10X,'TRANSLATIONAL ENERGY OF PRODUCTS',
     *10X,'PROBABILITY OF TRANSLATIONAL ENERGY(PER KCAL/MOLE)',/)    
  706 FORMAT(2I6,10X,F16.2,26X,D18.4)        
  707 FORMAT(/,' AVERAGE TRANSLATIONAL ENERGY =',F6.2,' KCAL/MOLE')   
  708 FORMAT(I6,10X,F16.2,'PROBABILITY CANNOT BE CALCLUATED,',
     *' BECAUSE THE SUM OF STATES AT THIS TRANSLATIONAL ENERGY IS 0')
  709 FORMAT(2I6,10X,F16.2,'PROBABILITY CANNOT BE CALCLUATED,',
     *' BECAUSE THE SUM OF STATES AT THIS TRANSLATIONAL ENERGY IS 0')
  710 READ(5,3)NTRAN          
      IF(NTRAN.EQ.0)GO TO 910
      IF(NCRIT.EQ.1)THEN
      WRITE(6,54)
      STOP
      ELSE
      ENDIF
      WRITE(6,22)           
      WRITE(6,22)     
      WRITE(6,23)   
      READ(5,3)NEDG
      IF(NEDG.GT.MAXETR)THEN
      WRITE(6,55)NEDG
      STOP
      ELSE
      ENDIF
      READ(5,4)(EDAGG(I),I=1,NEDG)   
      WRITE(6,701)                
      DO 840 I=1,NEDG        
      DELEDG=EDAGG(I)/50.0  
      EE(1)=EDAGG(I)-DELEDG/2.0   
      DO 715 J=2,50        
  715 EE(J)=EE(J-1)-DELEDG    
      DO 840 MJ=1,NJ
      JNOW=JK(MJ)
      AJ=DBLE(JNOW)
      GGC=0.0
      JAN=1
      GL=1.0
      ESUM=EDAGG(I)*349.755
C
      IF(KROT.EQ.4)GO TO 752
      IF(JSUM-0)720,730,740
C
  720 DO 725 L=0,JNOW
      AL=DBLE(L)
      GG(L)=0.0
      IF(L.GT.0)GL=2.0
      CALL ROEN(TC,AJ,AL,EJKC)
      EVIBC=ESUM-EJKC
      CALL SUMQ(EVIBC,NSC,NRC,WC,TRC,SYMC,SS)
      GG(L)=SS
      IF(NANH.EQ.0)GO TO 725
      KAN=1
      CALL ANHARM(NSC,NRC,WC,DAC,KAN,EVIBC,CG)
      GG(L)=CG*GG(L)
  725 GGC=GGC+GL*GG(L)
      GO TO 751
C
  730 DO 735 L=0,JNOW
      AL=DBLE(L)
      GG(L)=0.0
      IF(L.GT.0)GL=2.0
      CALL ROEN(TC,AJ,AL,EJKC)
      EVIBC=ESUM-EJKC
      IF(EVIBC.LE.0.0)GO TO 735
      CALL WRSEMI(NSC,NRC,WC,TRC,SYMC,EVIBC,JAN,SS)
      GG(L)=SS
      IF(NANH.EQ.0)GO TO 735
      KAN=1
      CALL ANHARM(NSC,NRC,WC,DAC,KAN,EVIBC,CG)
      GG(L)=CG*GG(L)
  735 GGC=GGC+GL*GG(L)
      GO TO 751
C
  740 IF(KROT.EQ.-1.OR.KROT.EQ.2)GO TO 746
      IF(JNOW.EQ.0)GO TO 746
      CALL CLACK(ESUM,AJ,NSC,NRC,WC,TC,TRC,SYMC,NANH,DAC,
     *JAN,SS,ASS)
      IF(NANH.NE.0)GO TO 745
      GGC=SS
      GO TO 751
  745 GGC=ASS
      GO TO 751
  746 DO 750 L=0,JNOW
      AL=DBLE(L)
      GG(L)=0.0
      IF(L.GT.0)GL=2.0
      CALL ROEN(TC,AJ,AL,EJKC)
      EVIBC=ESUM-EJKC
      IF(EVIBC.LE.0.0)GO TO 750
      CALL CLASS(NSC,NRC,WC,TRC,SYMC,EVIBC,JAN,SS)
      GG(L)=SS
      IF(NANH.EQ.0)GO TO 750
      KAN=1
      CALL ANHARM(NSC,NRC,WC,DAC,KAN,EVIBC,CG)
      GG(L)=CG*GG(L)
  750 CONTINUE
      IF(KROT.EQ.-1.OR.KROT.EQ.2)GO TO 751
      IF(JNOW.GT.0)GO TO 751
      GGC=GG(0)
C
  751 IF(KROT.EQ.0)GO TO 758
      GGC=GGC/(2.0*AJ+1.0)
      GO TO 758
C
  752 CALL ROENG(TC,AJ,EJKC,DDC)
      EVIBC=ESUM-EJKC
      IF(EVIBC.LE.0.0D0)GO TO 758
      DO 757 L=1,8
      SS=0.0D0
      YY=1.0D0-Y(L)**2
      EEC=YY*EVIBC
      IF(JSUM-0)753,754,755
C
C
  753 CALL SUMQ(EEC,NSC,NRC,WC,TRC,SYMC,SS)
      IF(NANH.EQ.0)GO TO 756
      KAN=1
      CALL ANHARM(NSC,NRC,WC,DAC,KAN,EEC,CC)
      SS=SS*CC
      GO TO 756
C
  754 CALL WRSEMI(NSC,NRC,WC,TRC,SYMC,EEC,JAN,SS)
      IF(NANH.EQ.0)GO TO 756
      KAN=1
      CALL ANHARM(NSC,NRC,WC,DAC,KAN,EEC,CC)
      SS=SS*CC
      GO TO 756
C
  755 CALL CLASS(NSC,NRC,WC,TRC,SYMC,EEC,JAN,SS)
      IF(NANH.EQ.0)GO TO 756
      KAN=1
      CALL ANHARM(NSC,NRC,WC,DAC,KAN,EEC,CC)
      SS=SS*CC
C
  756 GGC=GGC+SS*V(L) 
  757 CONTINUE
      GGC=GGC*DDC*EVIBC**0.5*2.0                
C
  758 WRITE(6,22)                  
      WRITE(6,702)EDAGG(I)   
      EAVE=0.0      
      ENORM=0.0    
      IF(KROT.EQ.-1.OR.KROT.EQ.2)GO TO 759
      WRITE(6,703)
      GO TO 760
  759 WRITE(6,705)
  760 DO 830 J=1,50
      EDEN=EE(J)*349.755
      JAN=0
      GL=1.0
      GNC=0.0
C
      IF(KROT.EQ.4)GO TO 807
      IF(JSUM-0)770,780,790
C
  770 DO 775 L=0,JNOW
      AL=DBLE(L)
      GN(L)=0.0
      IF(L.GT.0)GL=2.0
      CALL ROEN(TC,AJ,AL,EJKC)
      EVIBC=EDEN-EJKC
      IF(EVIBC.LE.0.0)GO TO 775
      YY=EVIBC-50.0
      CALL SUMQ(YY,NSC,NRC,WC,TRC,SYMC,SS)
      SUM1=SS
      YY=YY+100.0
      CALL SUMQ(YY,NSC,NRC,WC,TRC,SYMC,SS)
      SUM2=SS
      GN(L)=(SUM2-SUM1)/100.0
      IF(NANH.EQ.0)GO TO 775
      KAN=0
      CALL ANHARM(NSC,NRC,WC,DAC,KAN,EVIBC,CD)
      GN(L)=CD*GN(L)
  775 GNC=GNC+GL*GN(L)
      GO TO 806
C
  780 DO 785 L=0,JNOW
      AL=DBLE(L)
      GN(L)=0.0
      IF(L.GT.0)GL=2.0
      CALL ROEN(TC,AJ,AL,EJKC)
      EVIBC=EDEN-EJKC
      IF(EVIBC.LE.0.0)GO TO 785
      CALL WRSEMI(NSC,NRC,WC,TRC,SYMC,EVIBC,JAN,DD)
      GN(L)=DD
      IF(NANH.EQ.0)GO TO 785
      KAN=0
      CALL ANHARM(NSC,NRC,WC,DAC,KAN,EVIBC,CD)
      GN(L)=CD*GN(L)
  785 GNC=GNC+GL*GN(L)
      GO TO 806
C
  790 IF(KROT.EQ.-1.OR.KROT.EQ.2)GO TO 800
      IF(JNOW.EQ.0)GO TO 800
      CALL CLACK(EDEN,AJ,NSC,NRC,WC,TC,TRC,SYMC,NANH,DAC,
     *JAN,DD,ADD)
      IF(NANH.NE.0)GO TO 795
      GNC=DD
      GO TO 806
  795 GNC=ADD
      GO TO 806
  800 DO 805 L=0,JNOW
      AL=DBLE(L)
      GN(L)=0.0
      IF(L.GT.0)GL=2.0
      CALL ROEN(TC,AJ,AL,EJKC)
      EVIBC=EDEN-EJKC
      IF(EVIBC.LE.0.0)GO TO 805
      CALL CLASS(NSC,NRC,WC,TRC,SYMC,EVIBC,JAN,DD)
      GN(L)=DD
      IF(NANH.EQ.0)GO TO 805
      KAN=0
      CALL ANHARM(NSC,NRC,WC,DAC,KAN,EVIBC,CD)
      GN(L)=CD*GN(L)
  805 CONTINUE
      IF(KROT.EQ.-1.OR.KROT.EQ.2)GO TO 806
      IF(JNOW.GT.0)GO TO 806
      GNC=GN(0)
C
  806 IF(KROT.EQ.0)GO TO 813
      GNC=GNC/(2.0*AJ+1.0)
      GO TO 813
C
  807 CALL ROENG(TC,AJ,EJKC,DDC)
      EVIBC=EDEN-EJKC
      IF(EVIBC.LE.0.0D0)GO TO 813
      DO 812 L=1,8
      SS=0.0D0
      YY=1.0D0-Y(L)**2
      EEC=YY*EVIBC
      IF(JSUM-0)808,809,810
C
  808 EVC1=EEC+50.0
      CALL SUMQ(EVC1,NSC,NRC,WC,TRC,SYMC,SS)
      SUM1=SS
      EVC2=EVC1-100.0
      CALL SUMQ(EVC2,NSC,NRC,WC,TRC,SYMC,SS)
      SUM2=SS
      DD=(SUM1-SUM2)/100.0
      IF(NANH.EQ.0)GO TO 811
      KAN=0
      CALL ANHARM(NSC,NRC,WC,DAC,KAN,EEC,CC)
      DD=DD*CC
      GO TO 811
C
  809 CALL WRSEMI(NSC,NRC,WC,TRC,SYMC,EEC,JAN,DD)
      IF(NANH.EQ.0)GO TO 811
      KAN=0
      CALL ANHARM(NSC,NRC,WC,DAC,KAN,EEC,CC)
      DD=DD*CC
      GO TO 811
C
  810 CALL CLASS(NSC,NRC,WC,TRC,SYMC,EEC,JAN,DD)
      IF(NANH.EQ.0)GO TO 811
      KAN=0
      CALL ANHARM(NSC,NRC,WC,DAC,KAN,EEC,CC)
      DD=DD*CC
C
  811 GNC=GNC+DD*V(L)    
  812 CONTINUE
      GNC=GNC*DDC*EVIBC**0.5*2.0
C 
  813 CONTINUE
      EN=EDAGG(I)-EE(J)    
      IF(KROT.EQ.-1.OR.KROT.EQ.2)GO TO 817 
      IF(GGC.EQ.0.0)GO TO 816
      PET=GNC/GGC*349.755    
      WRITE(6,704)JNOW,EN,PET
      GO TO 820
  816 WRITE(6,708)JNOW,EN
      GO TO 820
  817 PETT=0.0
      GL=1.0
      DO 819 L=0,JNOW
      IF(L.GT.0)GL=2.0
      IF(GG(L).EQ.0.0)GO TO 818
      PET=GN(L)/GG(L)*349.755
      WRITE(6,706)JNOW,L,EN,PET
      PETT=PETT+GL*PET
      GO TO 819
  818 WRITE(6,709)JNOW,L,EN
  819 CONTINUE
      PET=PETT
  820 EAVE=EAVE+EN*PET   
      ENORM=ENORM+PET  
  830 CONTINUE
      EAVE=EAVE/ENORM
      WRITE(6,707)EAVE   
  840 CONTINUE
C
C
  910 WRITE(6,22)
      GO TO 999
  920 STOP            
      END
C
C                                                                       
C        ******************************
C
      SUBROUTINE CCDETR(E,J,LK,SUMG,ASUMG)
C
C     THIS SUBROUTINE DETERMINES THE POSITION OF THE TRANSITION
C     STATE BY MINIMUM NUMBER OF STATES
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      PARAMETER (MAXF=100,MAXCF=50,MAXIR=5,MAXCIR=2,MAXRP=200,
     *MAXE=50,MAXJ=50,MAXJV=400,MAXETR=250,MAXTT=50000)
      COMMON/OPTION/KROT,JDEN,JSUM,NANH,DAM,DAC
      COMMON/PARAMT1/NSC,NRC,TC(3),WC(MAXF),TRC(MAXIR),SYMC(MAXIR)
      COMMON/PARAMT2/MR,JJ,KK,LL,WCC(MAXCF,MAXRP),TRCC(MAXCIR,MAXRP),
     *TCC(3,MAXRP),RDAG(MAXRP),DELR,VRDAG(MAXRP)
      COMMON/PARAMETT2/SUM(MAXRP),ASUM(MAXRP),WCCG(MAXCF),WCG(MAXF),
     *TRCCG(MAXCIR),TRCG(MAXIR),TCCG(3),TCG(3)
      COMMON/DATA1/Y(8),V(8),NDATA,NDUM
C                                                                       
  500 FORMAT(/,'NUMBER OF OSCILLATORS',5X,'NUMBER OF INTERNAL ROTORS',
     *//,1X,I10,16X,I10)
  501 FORMAT(/,'MOMENTS OF INERTIA',5X,'AMU*ANGSTROM**2',//,
     *3F10.2)
  502 FORMAT(/,'FREQUENCIES',5X,'1/CM',/)
  503 FORMAT(7F12.1)
  504 FORMAT(/,15X,'INTERNAL ROTORS',/)
  505 FORMAT('REDUCED MOMENT OF INERTIA =',F8.3,5X,
     *'SYMMETRY NUMBER =',F4.1)
  506 FORMAT(/,'REACTION CO-ORDINATE',10X,
     *'  POTENTIAL ENERGY',/,6X,'ANGSTROM',21X,'KCAL/MOLE',/)
  507 FORMAT(5X,F10.2,19X,F10.2)
  508 FORMAT(/,'E =',F7.2,'  KCAL/MOLE',5X,'  J =',I5,5X,
     *'*****ENERGY IS NOT ENOUGH FOR PASSING THE',
     *' TRANSITION STATE TO THE PRODUCT*****',/)
  509 FORMAT(/,'E =',F7.2,'  KCAL/MOLE',5X,'  J =',I5,5X,
     *'  K =',I5,/,'*****ENERGY IS NOT ENOUGH FOR PASSING ',
     *'THE TRANSITION STATE TO THE PRODUCT*****',/)
  510 FORMAT(//,15X,'A MINIMUM WAS NOT FOUND IN THE NUMBER OF',
     *' STATES',/,10X,'*****THE FOLLOWING TRANSITION STATE GAVE',
     *' THE SMALLEST NUMBER OF STATES AND IS USED IN RATE',
     *' CONSTANT CALCULATIONS*****',/)
  511 FORMAT(//,15X,'A MINIMUM WAS FOUND IN THE NUMBER OF STATES',
     */,10X,'*****THE RESULTING TRANSITION STATE IS GIVEN BELOW',
     *'*****',/)
  512 FORMAT(/,'ANHARMONIC CORRECTION FOR COMPLEX:  AVERAGE',
     *' BOND ENERGY =',F7.2,' KCAL/MOLE')
  513 FORMAT('E =',F7.2,'  KCAL/MOLE',5X,'  J =',I5)
  514 FORMAT('E =',F7.2,'  KCAL/MOLE',5X,'  J =',I5,5X,
     *'  K =',I5)
C
      AJ=DBLE(J)
      JOKER=0
      DO 57 K=1,MR
    1 IF(JJ.EQ.0) GO TO 3
      DO 2 I=1,JJ
      L=NSC-JJ+I
    2 WC(L)=WCC(I,K)
    3 IF(KK.EQ.0) GO TO 5
      DO 4 I=1,KK
      MM=NRC-KK+I
    4 TRC(MM)=TRCC(I,K)
    5 IF(LL.EQ.0) GO TO 7
      DO 6 I=1,LL
      N=3-LL+I
    6 TC(N)=TCC(I,K)
    7 EC=E*349.755-VRDAG(K)*349.755
      JAN=1
      SUM(K)=0.0
      ASUM(K)=0.0
C
      IF(LK.LT.0)GO TO 45
C
C*****************************************************************
C     MODELS: ACTIVE/ACTIVE(KROT=0),ADIABATIC/ADIABATIC(KROT=-1),
C             ADIABATIC/ACTIVE(KROT=2),ACTIVE/ADIABATIC(KROT=3)
C*****************************************************************
C
      AL=DBLE(LK)
      CALL ROEN(TC,AJ,AL,EJKC)
      EVIBC=EC-EJKC
      IF(JSUM-0)10,20,30
C
C        BEYER-SWINEHART ALGORITHM
C
   10 CALL SUMQ(EVIBC,NSC,NRC,WC,TRC,SYMC,SS)
      SUM(K)=SS
      GO TO 40
C
C        WHITTEN-RABINOVITCH TECHNIQUE
C
   20 IF(EVIBC.LE.0.0)GO TO 40
      CALL WRSEMI(NSC,NRC,WC,TRC,SYMC,EVIBC,JAN,SS)
      SUM(K)=SS
      GO TO 40
C
C        CLASSICAL METHOD
C
   30 IF(EVIBC.LE.0.0)GO TO 40
      CALL CLASS(NSC,NRC,WC,TRC,SYMC,EVIBC,JAN,SS)
      SUM(K)=SS
C
   40 IF(NANH.EQ.0)GO TO 57
      KAN=1
      CALL ANHARM(NSC,NRC,WC,DAC,KAN,EVIBC,CC)
      ASUM(K)=SUM(K)*CC
      GO TO 57
C
   45 IF(KROT.EQ.4)GO TO 50
      IF(JSUM.EQ.1)GO TO 49
      GL=1.0
      DO 48 L=0,J
      AL=DBLE(L)
      IF(L.GT.0)GL=2.0
      CALL ROEN(TC,AJ,AL,EJKC)
      EVIBC=EC-EJKC
      IF(JSUM.EQ.0)GO TO 46
C
C        BEYER-SWINEHART ALGORITHM
C
      CALL SUMQ(EVIBC,NSC,NRC,WC,TRC,SYMC,SS)
      IF(NANH.EQ.0)GO TO 47
      KAN=1
      CALL ANHARM(NSC,NRC,WC,DAC,KAN,EVIBC,CC)
      ASS=SS*CC
      GO TO 47
C
C        WHITTEN-RABINOVITCH TECHNIQUE
C
   46 IF(EVIBC.LE.0.0)GO TO 48
      CALL WRSEMI(NSC,NRC,WC,TRC,SYMC,EVIBC,JAN,SS)
      IF(NANH.EQ.0)GO TO 47
      KAN=1
      CALL ANHARM(NSC,NRC,WC,DAC,KAN,EVIBC,CC)
      ASS=SS*CC
C
   47 SUM(K)=SUM(K)+GL*SS
      IF(NANH.EQ.0)GO TO 48
      ASUM(K)=ASUM(K)+GL*ASS
   48 CONTINUE
      GO TO 57
C
   49 CALL CLACK(EC,AJ,NSC,NRC,WC,TC,TRC,SYMC,NANH,DAC,
     *JAN,SS,ASS)
      SUM(K)=SS
      IF(NANH.EQ.0)GO TO 57
      ASUM(K)=ASS
      GO TO 57
C
C*****************************************************************
C     GILBERT-SMITH MODEL(KROT=4)
C*****************************************************************
C
   50 CALL ROENG(TC,AJ,EJKC,DDC)
      EVIBC=EC-EJKC
      IF(EVIBC.LE.0.0D0)GO TO 57
      DO 56 L=1,NDATA
      SS=0.0D0
      ASS=0.0D0
      YY=1.0D0-Y(L)**2
      EEC=YY*EVIBC
      IF(JSUM-0)51,52,53
C
C        DIRECT COUNT
C
   51 CALL SUMQ(EEC,NSC,NRC,WC,TRC,SYMC,SS)
      GO TO 54
C
C        SEMICLASSICAL METHOD
C
   52 CALL WRSEMI(NSC,NRC,WC,TRC,SYMC,EEC,JAN,SS)
      GO TO 54
C
C        CLASSICAL METHOD
C
   53 CALL CLASS(NSC,NRC,WC,TRC,SYMC,EEC,JAN,SS)
C
   54 IF(NANH.EQ.0)GO TO 55
      KAN=1
      CALL ANHARM(NSC,NRC,WC,DAC,KAN,EEC,CC)
      ASS=SS*CC
C
   55 SUM(K)=SUM(K)+SS*V(L)
      ASUM(K)=ASUM(K)+ASS*V(L)
   56 CONTINUE
      SUM(K)=SUM(K)*DDC*EVIBC**0.5*2.0
      ASUM(K)=ASUM(K)*DDC*EVIBC**0.5*2.0
C
   57 CONTINUE
C
      KO=1
      DO 60 K=2,MR
      IF(NANH.NE.0)GO TO 58
      IF(SUM(K).LE.SUM(KO))KO=K 
      GO TO 60
   58 IF(ASUM(K).LE.ASUM(KO))KO=K
   60 CONTINUE
      IF(NANH.NE.0)GO TO 61
      IF(SUM(KO).EQ.0.0D0)GO TO 92
      GO TO 62
   61 IF(ASUM(KO).EQ.0.0D0)GO TO 92
C
   62 IF(KO.EQ.1.OR.KO.EQ.MR)GO TO 81
      CALL QUAFIT(SUM(KO+1),SUM(KO),SUM(KO-1),RDAG(KO+1),
     *RDAG(KO),RDAG(KO-1),DELR,C1SUM,C2SUM,C3SUM)
      IF(NANH.NE.0)GO TO 63
      RDAGG=-C2SUM/2.0/C3SUM
      GO TO 64
   63 CALL QUAFIT(ASUM(KO+1),ASUM(KO),ASUM(KO-1),RDAG(KO+1),
     *RDAG(KO),RDAG(KO-1),DELR,C1ASUM,C2ASUM,C3ASUM)
      RDAGG=-C2ASUM/2.0/C3ASUM
      ASUMG=C1ASUM+C2ASUM*RDAGG+C3ASUM*RDAGG**2.0
   64 SUMG=C1SUM+C2SUM*RDAGG+C3SUM*RDAGG**2.0
      IF(JJ.EQ.0)GO TO 66
      DO 65 I=1,JJ
      CALL QUAFIT(WCC(I,KO+1),WCC(I,KO),WCC(I,KO-1),RDAG(KO+1),
     *RDAG(KO),RDAG(KO-1),DELR,C1WCC,C2WCC,C3WCC)
      WCCG(I)=C1WCC+C2WCC*RDAGG+C3WCC*RDAGG**2.0
   65 CONTINUE
   66 IF(KK.EQ.0)GO TO 68
      DO 67 I=1,KK
      CALL QUAFIT(TRCC(I,KO+1),TRCC(I,KO),TRCC(I,KO-1),RDAG(KO+1),
     *RDAG(KO),RDAG(KO-1),DELR,C1TRCC,C2TRCC,C3TRCC)
      TRCCG(I)=C1TRCC+C2TRCC*RDAGG+C3TRCC*RDAGG**2.0
   67 CONTINUE
   68 IF(LL.EQ.0) GO TO 70
      DO 69 I=1,LL
      CALL QUAFIT(TCC(I,KO+1),TCC(I,KO),TCC(I,KO-1),RDAG(KO+1),
     *RDAG(KO),RDAG(KO-1),DELR,C1TCC,C2TCC,C3TCC)
      TCCG(I)=C1TCC+C2TCC*RDAGG+C3TCC*RDAGG**2.0
   69 CONTINUE
   70 CALL QUAFIT(VRDAG(KO+1),VRDAG(KO),VRDAG(KO-1),RDAG(KO+1),
     *RDAG(KO),RDAG(KO-1),DELR,C1V,C2V,C3V)
      VG=C1V+C2V*RDAGG+C3V*RDAGG**2.0
      IF(JJ.EQ.0)GO TO 72
      DO 71 I=1,JJ
      L=NSC-JJ+I
   71 WCG(L)=WCCG(I)
   72 JKK=NSC-JJ
      DO 73 I=1,JKK
   73 WCG(I)=WC(I)
      IF(NRC.EQ.0) GO TO 77
      IF(KK.EQ.0) GO TO 75
      DO 74 I=1,KK
      MM=NRC-KK+I
   74 TRCG(MM)=TRCCG(I)
   75 K=NRC-KK
      DO 76 I=1,K
   76 TRCG(I)=TRC(I) 
   77 IF(LL.EQ.0)GO TO 79
      DO 78 I=1,LL
      N=3-LL+I
   78 TCG(N)=TCCG(I)
   79 L=3-LL
      DO 80 I=1,L
   80 TCG(I)=TC(I)
      GO TO 95
   81 JOKER=1
      RDAGG=RDAG(KO)
      SUMG=SUM(KO)
      ASUMG=ASUM(KO)
      IF(JJ.EQ.0)GO TO 83
      DO 82 I=1,JJ
      L=NSC-JJ+I
   82 WCG(L)=WCC(I,KO)
   83 JKK=NSC-JJ
      DO 84 I=1,JKK
   84 WCG(I)=WC(I)
      IF(NRC.EQ.0)GO TO 88
      IF(KK.EQ.0)GO TO 86
      DO 85 I=1,KK
      MM=NRC-KK+I
   85 TRCG(MM)=TRCC(I,KO)
   86 K=NRC-KK
      DO 87 I=1,K
   87 TRCG(I)=TRC(I)
   88 IF(LL.EQ.0)GO TO 90
      DO 89 I=1,LL
      N=3-LL+I
   89 TCG(N)=TCC(I,KO)
   90 L=3-LL
      DO 91 I=1,L
   91 TCG(I)=TC(I)
      VG=VRDAG(KO)
      WRITE(6,510)
      GO TO 96
   92 JOKER=2
      SUMG=0.0
      ASUMG=0.0
      IF(LK.LT.0)GO TO 93
      WRITE(6,509)E,J,LK
      GO TO 94
   93 WRITE(6,508)E,J
   94 GO TO 200
   95 WRITE(6,511)
   96 IF(LK.LT.0)GO TO 97
      WRITE(6,514)E,J,LK
      GO TO 98
   97 WRITE(6,513)E,J
   98 WRITE(6,506)
      WRITE(6,507)RDAGG,VG
      WRITE(6,500)NSC,NRC
      WRITE(6,502)
      WRITE(6,503)(WCG(I),I=1,NSC)
      WRITE(6,501)(TCG(I),I=1,3)
      IF(NRC.EQ.0)GO TO 100
      WRITE(6,504)
      DO 99 I=1,NRC
   99 WRITE(6,505)TRCG(I),SYMC(I)
  100 IF(NANH.EQ.0)GO TO 200
      WRITE(6,512)DAC
C
  200 RETURN
      END
C
C
C        ******************************
C
      SUBROUTINE WRSEMI(NS,NR,W,TR,SYM,E,K,DS)
C
C     THIS SUBROUTINE CALCULATES SUM AND DENSITY OF STATES USING
C     THE WHITTEN RABINOVITCH SEMICLASSICAL TECHNIQUE.
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      PARAMETER (MAXF=100,MAXCF=50,MAXIR=5,MAXCIR=2,MAXRP=200,
     *MAXE=50,MAXJ=50,MAXJV=400,MAXETR=250,MAXTT=50000)
      DIMENSION W(MAXF),TR(MAXIR),SYM(MAXIR)
C
      PFR=1.0
      S=DBLE(NS)
      R=DBLE(NR)
      IF(NR.EQ.0)GO TO 2
C
C        *****CALCULATION OF THE PARTITION FUNCTION FOR INT. ROTORS/(KT)
C             **R/2
C
      DO 1 I=1,NR
      PFIR=0.431694*(TR(I))**0.5/SYM(I)
    1 PFR=PFR*PFIR
C
C        *****CALCULATION OF B
C
    2 SW=0.0
      SWS=0.0
      DO 3 I=1,NS
      SWS=SWS+W(I)*W(I)
    3 SW=SW+W(I)
      SSW=SW**2.0
      BETA=(S-1.0)*(S+R/2.0)/S*SWS/SSW
C
C        *****CALCULATION OF THE ZERO-POINT ENERGY
C
      EZ=0.0
      DO 4 I=1,NS
    4 EZ=EZ+W(I)/2.0
C
C        *****CALCULATION OF THE GAMMA FUNCTION(S+R/2+1)
C               R ODD
C                   GAMMA(N+1/2)=(1*3*5 --- (2N-1)*SQRT(3.1416)/2**N)
C               R EVEN
C                   GAMMA(N+1)= N FACTORIAL
C          NOTE THAT (S+R/2) IS PUT IN WHEN THE DENSITY IS CALCULATED
C
      NRT=(NR/2)*2
      IF(NR-NRT)5,5,7
    5 NDUM=NS+NR/2
      GAMA=0.0
      DO 6 I=1,NDUM
    6 GAMA=GAMA+DLOG10(DBLE(I))
      GO TO 9
    7 NZ=NS+NR/2+1
      GAMAT=0.0
      MAX=2*NZ-1
      DO 8 I=1,MAX,2
    8 GAMAT=GAMAT+DLOG10(DBLE(I))
      GAMA=GAMAT+DLOG10(1.77245D0/2.0**NZ)
C
C        *****CALCULATION OF THE PRODUCT OF FREQUENCIES
C
    9 APRD=0.0
      DO 10 I=1,NS
   10 APRD=APRD+DLOG10(W(I))
      IF(K.EQ.0)GO TO 14
C
C        *****CALCULATION OF SUM
C
      XP=S+R/2.0
      EPM=E/EZ
      IF(EPM-1.0)11,12,12
   11 WW=1.0/(5.0*EPM+2.73*EPM**0.5+3.51)
      GO TO 13
   12 XXX=-2.4191*EPM**0.25
      WW=DEXP(XXX)
   13 AA=1.0-BETA*WW
      ASU=DLOG10(PFR)-GAMA-APRD+(XP*DLOG10(E+AA*EZ))
      DS=10.0**ASU 
      GO TO 18
C
C        *****CALCULATION OF DENSITY
C
   14 XP=S+R/2.0-1.0
      EPM=E/EZ
      IF(EPM-1.0)15,16,16
   15 UPPER=-1.0*(5.0/EZ+1.365/E**0.5/EZ**0.5)
      DENOM=(5.0*EPM+2.73*EPM**0.5+3.51)**2.0
      DELW=UPPER/DENOM
      WW=1.0/(5.0*EPM+2.73*EPM**0.5+3.51)
      GO TO 17
   16 UPPER=-0.60478/E**0.75
      DENOM=EZ**0.25
      XXX=-2.4191*EPM**0.25
      DELW=UPPER/DENOM*DEXP(XXX)
      WW=DEXP(XXX)
   17 AA=1.0-BETA*WW
      ADUM=DLOG10(PFR)+DLOG10(S+R/2.0)-GAMA-APRD
      ADEN=ADUM+(XP*DLOG10(E+AA*EZ))+DLOG10(1.0-EZ*BETA*DELW)
      DS=10.0**ADEN
   18 RETURN
      END
C
C
      SUBROUTINE BSCOMP(NS,W,MAX,DEL,T)
C
C     THIS SUBROUTINE USES THE BEYER-SWINHART ALGORITHM
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      PARAMETER (MAXF=100,MAXCF=50,MAXIR=5,MAXCIR=2,MAXRP=200,
     *MAXE=50,MAXJ=50,MAXJV=400,MAXETR=250,MAXTT=50000)
      DIMENSION W(MAXF),T(MAXTT),NR(MAXF)
C
C        *****CALCULATION OF EFFECTIVE INTEGER FOR EACH FREQUENCY
C
      DO 1 I=1,NS
      NR(I)=W(I)/DEL+0.499999
    1 CONTINUE
C              
C        *****INITIALIZE T ARRAY      
C
      T(1)=1.0
      DO 2 I=2,MAX
      T(I)=0.0
    2 CONTINUE
C
C        *****ADDITION SEQUENCE FOR THE T ARRAY.  EMAX=(MAX-1)*DEL
C 
      DO 4 I=1,NS
      M=1
    3 MNR=NR(I)+M
      IF(MNR.GT.MAX)GO TO 4
      T(MNR)=T(MNR)+T(M)
      M=M+1
      GO TO 3
    4 CONTINUE
C
C        *****CONVERT SUM AT E TO SUM FOR E=0 TO E
C
      DO 5 I=2,MAX
      T(I)=T(I)+T(I-1)
    5 CONTINUE
      RETURN
      END
C         
C
      SUBROUTINE CLASS(NS,NR,W,TR,SYM,E,K,DS)
C
C     THIS SUBROUTINE CALCULATES SUM AND DENSITY OF STATES
C     CLASSICALLY.
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      PARAMETER (MAXF=100,MAXCF=50,MAXIR=5,MAXCIR=2,MAXRP=200,
     *MAXE=50,MAXJ=50,MAXJV=400,MAXETR=250,MAXTT=50000)
      DIMENSION W(MAXF),TR(MAXIR),SYM(MAXIR)
C
C        *****CALCULATION OF THE PARTITION FUNCTION FOR INT.
C             ROTORS/(KT)**R/2
C
      PFR=1.0
      S=DBLE(NS)
      R=DBLE(NR)
      IF(NR.EQ.0)GO TO 2
      DO 1 I=1,NR
      PFIR=0.431694*(TR(I))**0.5/SYM(I)
    1 PFR=PFR*PFIR
C
C        *****CALCULATION OF THE GAMMA FUNCTION
C
    2 NRT=(NR/2)*2
      IF(NR-NRT)3,3,5
    3 NDUM=NS+NR/2-1+K
      GAMA=0.0
      DO 4 I=1,NDUM
    4 GAMA=GAMA+DLOG10(DBLE(I))
      GO TO 7
    5 NZ=NS+NR/2+K
      GAMAT=0.0
      MAX=2*NZ-1
      DO 6 I=1,MAX,2
    6 GAMAT=GAMAT+DLOG10(DBLE(I))
      GAMA=GAMAT+DLOG10(1.77245D0/2.0**NZ)
C
C        *****CALCULATION OF THE PRODUCT OF FREQUENCIES 
C
    7 APRD=0.0
      DO 8 I=1,NS
    8 APRD=APRD+DLOG10(W(I))
C
C        *****CALCULATION OF SUM OR DENSITY OF STATES
C
      XP=S+R/2.0-1.0+DBLE(K)
      DS=DLOG10(PFR)+XP*DLOG10(E)-GAMA-APRD
      DS=10.0**DS
      RETURN
      END
C
C
      SUBROUTINE ROEN(T,AJ,AK,EROT)
C
C     THIS SUBROUTINE CALCULATES THE ROTATIONAL ENERGY
C     FOR THE SYMMETRIC(ALMOST SYMMETRIC) TOP MOLECULE EROT(J,K)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      DIMENSION T(3)
C
      TABIN=0.5*(1.0/T(1)+1.0/T(2))
      IF(T(3).LE.0.0D0)THEN
      EROT=16.8577*AJ*(AJ+1.0)*TABIN
      RETURN
      ELSE
      EROT=16.8577*(AJ*(AJ+1.0)*TABIN+AK**2.0*(1.0/T(3)-TABIN))
      END IF
      RETURN
      END
C
C
      SUBROUTINE ROENG(T,AJ,EROT,DD)
C
C     THIS SUBROUTINE CALCULATES THE J-DEPENDENT ROTATIONAL
C     ENERGY AND CLASSICAL DENSITY FOR K-DEPENDENT ROTATION
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      DIMENSION T(3)
C
      EROT=16.8577*AJ*(AJ+1.0)/T(1)
      DD=0.2435572*T(3)**0.5
      RETURN
      END
C
C     
      SUBROUTINE SUMQ(E,NS,NR,W,TR,SYM,SUM)
C
C     THIS SUBROUTINE MAKES A DIRECT COUNT OF QUANTUM STATES
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      PARAMETER (MAXF=100,MAXCF=50,MAXIR=5,MAXCIR=2,MAXRP=200,
     *MAXE=50,MAXJ=50,MAXJV=400,MAXETR=250,MAXTT=50000)
      COMMON/DATA1/X(8),WW(8),NDATA,NDUM
      DIMENSION W(MAXF),TR(MAXIR),SYM(MAXIR),T(MAXTT)
C
   50 FORMAT(/,'MORE STORAGE IS NEEDED FOR THIS SYSTEM',
     *'IN THE PARAMETER STATEMENT SET MAXTT >',I7)
C
C
      DEL=1.0D0
      MAX=20
C
C
      IF(E-0.0)1,2,2
    1 SUM=0.0D0
      GO TO 15
    2 IF(NR.NE.0)GO TO 3
C
C         *****CLACULATE THE SUM OF STATES WITH NO INTERNAL ROTOR*****
C
      MAXT=IDINT(E/DEL+0.499999)
      MAXT=MAXT+MAX
      IF(MAXT.GT.MAXTT)THEN
      WRITE(6,50)MAXT
      STOP
      ELSE
      ENDIF
      CALL BSCOMP(NS,W,MAXT,DEL,T)
      NDELT=IDINT(E/DEL)
      DUM1=T(NDELT+2)-T(NDELT+1)
      DUM2=E/DEL-DBLE(NDELT)
      SUM=T(NDELT+1)+DUM1*DUM2
      GO TO 15
C
   3  R=DBLE(NR)
      PFR=1.0 
C
C     *****CALCULATION OF THE PARTITION FUNCTION FOR INTERNAL ROTORS
C          /(KT)**R/2
C
      DO 4 I=1,NR  
      PFIR=0.431694*(TR(I))**0.5/SYM(I) 
    4 PFR=PFR*PFIR   
C
C     *****CALCULATE GAMMA FUNCTION OF R/2  
C
      NRT=(NR/2)*2  
      IF(NR-NRT)5,5,7
    5 NDUM=NR/2-1   
      GAMA=1.0
      DO 6 I=1,NDUM 
    6 GAMA=GAMA*DBLE(I) 
      GO TO 9  
    7 NZ=NR/2 
      GAMAT=1.0
      MAXX=2*NZ-1 
      DO 8 I=1,MAXX,2 
    8 GAMAT=GAMAT*DBLE(I) 
      GAMA=GAMAT*1.77245/2.0**NZ 
C
C        *****CALCULATE THE SUM OF STATES WITH INTERNAL ROTOR*****
C
    9 SSM=0.0
      RR=R/2.0-1.0
      DO 10 I=1,NDATA
      EE=E*X(I)
      MAXT=EE/DEL+0.499999
      MAXT=MAXT+MAX
      IF(MAXT.GT.MAXTT)THEN
      WRITE(6,50)MAXT
      STOP
      ELSE
      ENDIF
      CALL BSCOMP(NS,W,MAXT,DEL,T)
      NDELT=EE/DEL
      DUM1=T(NDELT+2)-T(NDELT+1)
      DUM2=EE/DEL-DBLE(NDELT)
      SS=T(NDELT+1)+DUM1*DUM2
      SSM=SSM+SS*WW(I)*E*(E-EE)**RR
   10 CONTINUE
      SUM=SSM*PFR/GAMA
   15 RETURN
      END
C
C
      SUBROUTINE CLACK(E,AJ,NS,NR,W,T,TR,SYM,NANH,DA,JAN,
     *CHAN,ACHAN)
C
C     THIS SUBROUTINE CALCULATE THE SUM OF STATES G(E,J) OR
C     DENSITY OF STATES N(E,J) FOR ACTIVE QUANTUM NUMBER K;
C     SEE JOURNAL OF CHEMICAL PHYSICS,95,8073(1991).
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      PARAMETER (MAXF=100,MAXCF=50,MAXIR=5,MAXCIR=2,MAXRP=200,
     *MAXE=50,MAXJ=50,MAXJV=400,MAXETR=250,MAXTT=50000)
      DIMENSION W(MAXF),T(3),TR(MAXIR),SYM(MAXIR)
C
      CHAN=0.0
      ACHAN=0.0
      JROT=DINT(AJ)
      DO 20 I=1,JROT
      AKK=DBLE(I)
      CALL ROEN(T,AJ,AKK,EJK)
      EVIB=E-EJK
      IF(JAN.EQ.0)GO TO 10
C
C        *****CALCULATION OF SUM OF STATES*****
C
      IF(EVIB.LE.0.0)GO TO 20
      CALL CLASS(NS,NR,W,TR,SYM,EVIB,JAN,SUM)
      SUMJK=SUM
      CHAN=CHAN+SUMJK*2.0*AJ
      IF(NANH.EQ.0)GO TO 20
      KAN=1
      CALL ANHARM(NS,NR,W,DA,KAN,EVIB,C)
      SUMJK=SUMJK*C
      ACHAN=ACHAN+SUMJK*2.0*AJ
      GO TO 20
C
C        *****CALCULATION OF DENSITY OF STATES*****
C
   10 IF(EVIB.LE.0.0)GO TO 20
      CALL CLASS(NS,NR,W,TR,SYM,EVIB,JAN,DEN)
      DENJK=DEN
      CHAN=CHAN+DENJK*2.0*AJ
      IF(NANH.EQ.0)GO TO 20
      KAN=0
      CALL ANHARM(NS,NR,W,DA,KAN,EVIB,C)
      DENJK=DENJK*C
      ACHAN=ACHAN+DENJK*2.0*AJ
C
   20 CONTINUE
      RETURN
      END
C
C
      SUBROUTINE ANHARM(NS,NR,W,DA,K,E,C)                       
C                                                                
C     THIS SUBROUTINE CALCULATES AN ANHARMONIC CORRECTION TO THE SUM 
C     AND DENSITY USING THE HAARHOFF TECHNIQUE.               
C 
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      PARAMETER (MAXF=1000,MAXCF=50,MAXIR=5,MAXCIR=2,MAXRP=200,
     *MAXE=50,MAXJ=50,MAXJV=400,MAXETR=250,MAXTT=50000)
      DIMENSION W(MAXF)                    
C
      D=DA*349.755                          
      S=DBLE(NS)                          
      R=DBLE(NR)                            
      AK=DBLE(K)                               
      AN=S+AK-1.0+R/2.0                           
      EZ=0.0                                         
      DO 1 I=1,NS                                     
    1 EZ=EZ+W(I)/2.0                                   
      EPM=E/EZ                                          
      SW=0.0                                             
      SWS=0.0                                             
      DO 2 I=1,NS                                            
      SWS=SWS+W(I)*W(I)                                       
    2 SW=SW+W(I)                                               
      A=(SWS/S)/(SW/S)**2.0                                         
      AM2=S*(4.0*S+2.5*(R+2.0*AK))/(8.0*(AN+1.0)**2.0*(AN+2.0))      
      AM3=S*(24.0*S**2.0+29.5*S*(R+2.0*AK)+9.25*(R+2.0*AK)**2.0)/
     *(24.0*(AN+1.0)**3.0*(AN+2.0)*(AN+3.0))             
      F1=(1.0+2.0/EPM)**((EPM/2.0)*(1.0+EPM/2.0))  
      F2=DEXP(-(A-1.0)/(3.0*(1.0+EPM))) 
      F3=(F1*F2)**(S*EZ/((AN+1.0)*D)) 
      F4=AM2*(1.0+EPM)**2.0*(EZ/D)**2.0
      F5=AM3*(1.0+EPM)**3.0*(EZ/D)**3.0
      C=F3*DEXP(F4+F5)                   
      RETURN                             
      END                                 
C
      SUBROUTINE QUAFIT(S1,S2,S3,R1,R2,R3,DEL,CC1,CC2,CC3)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      DENOM=R1**2.0-2.0*R2**2.0+R3**2.0
      UPPER=R1**2.0-R2**2.0
      CC3=(S1-2.0*S2+S3)/DENOM
      CC2=(S1-S2-CC3*UPPER)/DEL
      CC1=S3-CC2*R3-CC3*R3**2.0
      RETURN
      END
C
C
      SUBROUTINE DATA
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      COMMON/DATA1/Y(8),V(8),NDATA,NDUM
      DIMENSION X(8),W(8)
C
      DATA X/.0198550718,.1016667613,.2372337950,.4082826788,
     *.5917173212,.7627662050,.8983332387,.9801449282/
      DATA W/.0506142681,.1111905172,.1568533229,.1813418917,
     *.1813418917,.1568533229,.1111905172,.0506142681/
C
      NDATA=8
      DO 10 I=1,NDATA
      Y(I)=X(I)
      V(I)=W(I)
   10 CONTINUE
      RETURN
      END
